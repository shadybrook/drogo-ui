{"ast":null,"code":"var _jsxFileName = \"/Users/chintandedhia/100xDevs/PropulsionTestData/Drogo_UI/src/contexts/LocationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LocationContext = /*#__PURE__*/createContext();\nexport const useLocation = () => {\n  _s();\n  const context = useContext(LocationContext);\n  if (!context) {\n    throw new Error('useLocation must be used within a LocationProvider');\n  }\n  return context;\n};\n_s(useLocation, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const LocationProvider = ({\n  children\n}) => {\n  _s2();\n  const [selectedAddress, setSelectedAddress] = useState('');\n  const [terraceAccessible, setTerraceAccessible] = useState(false);\n  const [userLocation, setUserLocation] = useState(null);\n  const [selectedDeliverySpot, setSelectedDeliverySpot] = useState(null);\n  const [isMapVisible, setIsMapVisible] = useState(false);\n  const [showIntentForm, setShowIntentForm] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState([]);\n\n  // Andheri West delivery spots with real locations\n  const deliverySpots = [{\n    id: 'spot_1',\n    name: 'Andheri Metro Station',\n    address: 'Andheri West Metro Station, Mumbai',\n    coordinates: [19.1197, 72.8464],\n    distance: '100m',\n    walkTime: '2 min walk',\n    type: 'main_entrance',\n    available: true\n  }, {\n    id: 'spot_2',\n    name: 'Infiniti Mall',\n    address: 'New Link Road, Andheri West',\n    coordinates: [19.1170, 72.8426],\n    distance: '150m',\n    walkTime: '2 min walk',\n    type: 'shopping',\n    available: true\n  }, {\n    id: 'spot_3',\n    name: 'Oshiwara Bus Depot',\n    address: 'Oshiwara, Andheri West',\n    coordinates: [19.1449, 72.8367],\n    distance: '200m',\n    walkTime: '3 min walk',\n    type: 'residential',\n    available: true\n  }, {\n    id: 'spot_4',\n    name: 'Lokhandwala Complex',\n    address: 'Lokhandwala, Andheri West',\n    coordinates: [19.1408, 72.8347],\n    distance: '180m',\n    walkTime: '3 min walk',\n    type: 'residential',\n    available: true\n  }, {\n    id: 'spot_5',\n    name: 'Versova Beach',\n    address: 'Versova, Andheri West',\n    coordinates: [19.1314, 72.8137],\n    distance: '300m',\n    walkTime: '4 min walk',\n    type: 'recreational',\n    available: true\n  }, {\n    id: 'spot_6',\n    name: 'Four Bungalows',\n    address: 'Four Bungalows, Andheri West',\n    coordinates: [19.1180, 72.8226],\n    distance: '250m',\n    walkTime: '3 min walk',\n    type: 'residential',\n    available: true\n  }, {\n    id: 'spot_7',\n    name: 'MIDC Central Road',\n    address: 'MIDC, Andheri East',\n    coordinates: [19.1136, 72.8697],\n    distance: '400m',\n    walkTime: '5 min walk',\n    type: 'industrial',\n    available: true\n  }];\n\n  // Andheri West address suggestions\n  const sampleAddresses = ['Andheri Metro Station, Andheri West, Mumbai, Maharashtra', 'Infiniti Mall, New Link Road, Andheri West, Mumbai', 'Lokhandwala Complex, Andheri West, Mumbai, Maharashtra', 'Oshiwara Bus Depot, Oshiwara, Andheri West, Mumbai', 'Versova Beach, Versova, Andheri West, Mumbai', 'Four Bungalows, Andheri West, Mumbai, Maharashtra', 'MIDC Central Road, Andheri East, Mumbai, Maharashtra'];\n\n  // Load location data from localStorage on mount\n  useEffect(() => {\n    const savedLocation = localStorage.getItem('drogo_location');\n    if (savedLocation) {\n      try {\n        const locationData = JSON.parse(savedLocation);\n        setSelectedAddress(locationData.selectedAddress || '');\n        setTerraceAccessible(locationData.terraceAccessible || false);\n        setUserLocation(locationData.userLocation || null);\n        setSelectedDeliverySpot(locationData.selectedDeliverySpot || null);\n      } catch (error) {\n        console.error('Error parsing saved location data:', error);\n        localStorage.removeItem('drogo_location');\n      }\n    }\n  }, []);\n\n  // Save location data to localStorage whenever it changes\n  useEffect(() => {\n    const locationData = {\n      selectedAddress,\n      terraceAccessible,\n      userLocation,\n      selectedDeliverySpot\n    };\n    localStorage.setItem('drogo_location', JSON.stringify(locationData));\n  }, [selectedAddress, terraceAccessible, userLocation, selectedDeliverySpot]);\n  const searchAddresses = async query => {\n    if (!query || query.length < 3) {\n      setSearchResults([]);\n      return [];\n    }\n    setIsSearching(true);\n    try {\n      // Simulate real address search - in production, use Google Places API or similar\n      const mockResults = [...sampleAddresses.filter(addr => addr.toLowerCase().includes(query.toLowerCase())).map(addr => {\n        var _deliverySpots$find, _deliverySpots$find2;\n        return {\n          formatted_address: addr,\n          place_id: `mock_${addr.replace(/\\s+/g, '_')}`,\n          geometry: {\n            location: {\n              lat: ((_deliverySpots$find = deliverySpots.find(spot => addr.toLowerCase().includes(spot.name.toLowerCase()))) === null || _deliverySpots$find === void 0 ? void 0 : _deliverySpots$find.coordinates[0]) || 19.1197,\n              lng: ((_deliverySpots$find2 = deliverySpots.find(spot => addr.toLowerCase().includes(spot.name.toLowerCase()))) === null || _deliverySpots$find2 === void 0 ? void 0 : _deliverySpots$find2.coordinates[1]) || 72.8464\n            }\n          }\n        };\n      })];\n\n      // Add some mock non-serviceable areas\n      if (query.toLowerCase().includes('bandra') || query.toLowerCase().includes('powai') || query.toLowerCase().includes('worli')) {\n        mockResults.push({\n          formatted_address: `${query}, Mumbai, Maharashtra, India`,\n          place_id: `mock_non_serviceable_${query}`,\n          geometry: {\n            location: {\n              lat: 19.0596,\n              lng: 72.8295\n            }\n          }\n        });\n      }\n      setSearchResults(mockResults);\n      return mockResults;\n    } catch (error) {\n      console.error('Address search error:', error);\n      toast.error('Unable to search addresses. Please try again.');\n      return [];\n    } finally {\n      setIsSearching(false);\n    }\n  };\n  const updateAddress = address => {\n    setSelectedAddress(address);\n\n    // Check if address is in serviceable area\n    const isServiceable = checkServiceableArea(address);\n    if (isServiceable && address && address.length > 5) {\n      setTimeout(() => {\n        setIsMapVisible(true);\n      }, 800);\n      // Reset delivery spot when address changes\n      setSelectedDeliverySpot(null);\n    } else if (address && address.length > 5 && !isServiceable) {\n      // Show intent form for non-serviceable areas\n      setShowIntentForm(true);\n      setIsMapVisible(false);\n      setSelectedDeliverySpot(null);\n    } else {\n      setIsMapVisible(false);\n      setSelectedDeliverySpot(null);\n    }\n  };\n  const checkServiceableArea = address => {\n    if (!address) return false;\n    const lowerAddress = address.toLowerCase();\n    const serviceableAreas = ['andheri west', 'andheri', 'lokhandwala', 'oshiwara', 'versova', 'four bungalows', 'midc', 'infiniti mall'];\n    return serviceableAreas.some(area => lowerAddress.includes(area));\n  };\n  const updateTerraceAccessibility = accessible => {\n    setTerraceAccessible(accessible);\n    if (accessible) {\n      toast.success('Great! This will help us deliver faster 🚁', {\n        autoClose: 3000\n      });\n    }\n  };\n  const getCurrentLocation = () => {\n    return new Promise((resolve, reject) => {\n      if (!navigator.geolocation) {\n        reject(new Error('Geolocation not supported'));\n        return;\n      }\n      navigator.geolocation.getCurrentPosition(position => {\n        const coords = [position.coords.latitude, position.coords.longitude];\n        setUserLocation(coords);\n\n        // Mock reverse geocoding - in production use actual geocoding service\n        const mockAddress = 'BITS Pilani, Navi Mumbai, Maharashtra, India';\n        setSelectedAddress(mockAddress);\n        toast.success('Location detected successfully! 📍');\n        resolve(coords);\n      }, error => {\n        console.error('Geolocation error:', error);\n        toast.error('Unable to get location. Please enter manually.');\n        reject(error);\n      }, {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 60000\n      });\n    });\n  };\n  const selectDeliverySpot = spotId => {\n    const spot = deliverySpots.find(s => s.id === spotId);\n    if (!spot || !spot.available) {\n      toast.error('This delivery spot is not available');\n      return false;\n    }\n    setSelectedDeliverySpot(spot);\n    toast.success(`Selected: ${spot.name} 📍`);\n    return true;\n  };\n  const confirmDeliverySpot = () => {\n    if (!selectedDeliverySpot) {\n      toast.error('Please select a delivery spot first');\n      return false;\n    }\n\n    // Send data to backend (mock implementation)\n    sendDeliverySpotToBackend();\n    toast.success(`Delivery spot confirmed: ${selectedDeliverySpot.name} ✅`);\n    return true;\n  };\n  const sendDeliverySpotToBackend = () => {\n    const payload = {\n      user_address: selectedAddress,\n      user_location: userLocation,\n      delivery_spot: selectedDeliverySpot ? {\n        id: selectedDeliverySpot.id,\n        name: selectedDeliverySpot.name,\n        coordinates: selectedDeliverySpot.coordinates,\n        type: selectedDeliverySpot.type\n      } : null,\n      terrace_accessible: terraceAccessible,\n      timestamp: new Date().toISOString()\n    };\n    console.log('📡 Sending delivery spot data to backend:', payload);\n\n    // In production, make actual API call:\n    // fetch('/api/delivery-spots/select', {\n    //   method: 'POST',\n    //   headers: { 'Content-Type': 'application/json' },\n    //   body: JSON.stringify(payload)\n    // });\n\n    toast.info('Delivery preferences saved! 💾');\n    return payload;\n  };\n  const getFilteredAddresses = query => {\n    if (!query || query.length < 2) return [];\n    return sampleAddresses.filter(address => address.toLowerCase().includes(query.toLowerCase()));\n  };\n  const isAddressValid = () => {\n    return selectedAddress && selectedAddress.length > 5;\n  };\n  const canProceed = () => {\n    const hasValidAddress = isAddressValid();\n    const hasServiceableArea = checkServiceableArea(selectedAddress);\n    const hasDeliverySpot = selectedDeliverySpot !== null;\n    return hasValidAddress && hasServiceableArea && hasDeliverySpot;\n  };\n  const submitIntentForm = async formData => {\n    try {\n      // Mock API call - in production, send to your backend\n      console.log('📝 Intent form submitted:', formData);\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      toast.success('Thank you! We\\'ll notify you when DroGo launches in your area! 🚁');\n      setShowIntentForm(false);\n\n      // Store intent in localStorage for demo\n      const existingIntents = JSON.parse(localStorage.getItem('drogo_intents') || '[]');\n      existingIntents.push({\n        ...formData,\n        timestamp: new Date().toISOString(),\n        id: Date.now()\n      });\n      localStorage.setItem('drogo_intents', JSON.stringify(existingIntents));\n      return true;\n    } catch (error) {\n      console.error('Intent form submission error:', error);\n      toast.error('Something went wrong. Please try again.');\n      return false;\n    }\n  };\n  const resetLocation = () => {\n    setSelectedAddress('');\n    setTerraceAccessible(false);\n    setUserLocation(null);\n    setSelectedDeliverySpot(null);\n    setIsMapVisible(false);\n    setShowIntentForm(false);\n    setSearchResults([]);\n    localStorage.removeItem('drogo_location');\n  };\n  const value = {\n    // State\n    selectedAddress,\n    terraceAccessible,\n    userLocation,\n    selectedDeliverySpot,\n    isMapVisible,\n    showIntentForm,\n    isSearching,\n    searchResults,\n    deliverySpots,\n    sampleAddresses,\n    // Actions\n    updateAddress,\n    updateTerraceAccessibility,\n    getCurrentLocation,\n    selectDeliverySpot,\n    confirmDeliverySpot,\n    sendDeliverySpotToBackend,\n    getFilteredAddresses,\n    searchAddresses,\n    submitIntentForm,\n    resetLocation,\n    // Computed\n    isAddressValid,\n    canProceed,\n    // Map controls\n    setIsMapVisible,\n    setShowIntentForm\n  };\n  return /*#__PURE__*/_jsxDEV(LocationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 414,\n    columnNumber: 5\n  }, this);\n};\n_s2(LocationProvider, \"HRolb2Z0hBlOuTA/dcPdHYRGf7c=\");\n_c = LocationProvider;\nvar _c;\n$RefreshReg$(_c, \"LocationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","toast","jsxDEV","_jsxDEV","LocationContext","useLocation","_s","context","Error","LocationProvider","children","_s2","selectedAddress","setSelectedAddress","terraceAccessible","setTerraceAccessible","userLocation","setUserLocation","selectedDeliverySpot","setSelectedDeliverySpot","isMapVisible","setIsMapVisible","showIntentForm","setShowIntentForm","isSearching","setIsSearching","searchResults","setSearchResults","deliverySpots","id","name","address","coordinates","distance","walkTime","type","available","sampleAddresses","savedLocation","localStorage","getItem","locationData","JSON","parse","error","console","removeItem","setItem","stringify","searchAddresses","query","length","mockResults","filter","addr","toLowerCase","includes","map","_deliverySpots$find","_deliverySpots$find2","formatted_address","place_id","replace","geometry","location","lat","find","spot","lng","push","updateAddress","isServiceable","checkServiceableArea","setTimeout","lowerAddress","serviceableAreas","some","area","updateTerraceAccessibility","accessible","success","autoClose","getCurrentLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","mockAddress","enableHighAccuracy","timeout","maximumAge","selectDeliverySpot","spotId","s","confirmDeliverySpot","sendDeliverySpotToBackend","payload","user_address","user_location","delivery_spot","terrace_accessible","timestamp","Date","toISOString","log","info","getFilteredAddresses","isAddressValid","canProceed","hasValidAddress","hasServiceableArea","hasDeliverySpot","submitIntentForm","formData","existingIntents","now","resetLocation","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/chintandedhia/100xDevs/PropulsionTestData/Drogo_UI/src/contexts/LocationContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\n\nconst LocationContext = createContext();\n\nexport const useLocation = () => {\n  const context = useContext(LocationContext);\n  if (!context) {\n    throw new Error('useLocation must be used within a LocationProvider');\n  }\n  return context;\n};\n\nexport const LocationProvider = ({ children }) => {\n  const [selectedAddress, setSelectedAddress] = useState('');\n  const [terraceAccessible, setTerraceAccessible] = useState(false);\n  const [userLocation, setUserLocation] = useState(null);\n  const [selectedDeliverySpot, setSelectedDeliverySpot] = useState(null);\n  const [isMapVisible, setIsMapVisible] = useState(false);\n  const [showIntentForm, setShowIntentForm] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState([]);\n\n  // Andheri West delivery spots with real locations\n  const deliverySpots = [\n    {\n      id: 'spot_1',\n      name: 'Andheri Metro Station',\n      address: 'Andheri West Metro Station, Mumbai',\n      coordinates: [19.1197, 72.8464],\n      distance: '100m',\n      walkTime: '2 min walk',\n      type: 'main_entrance',\n      available: true\n    },\n    {\n      id: 'spot_2', \n      name: 'Infiniti Mall',\n      address: 'New Link Road, Andheri West',\n      coordinates: [19.1170, 72.8426],\n      distance: '150m',\n      walkTime: '2 min walk',\n      type: 'shopping',\n      available: true\n    },\n    {\n      id: 'spot_3',\n      name: 'Oshiwara Bus Depot',\n      address: 'Oshiwara, Andheri West',\n      coordinates: [19.1449, 72.8367],\n      distance: '200m',\n      walkTime: '3 min walk',\n      type: 'residential',\n      available: true\n    },\n    {\n      id: 'spot_4',\n      name: 'Lokhandwala Complex',\n      address: 'Lokhandwala, Andheri West',\n      coordinates: [19.1408, 72.8347],\n      distance: '180m',\n      walkTime: '3 min walk',\n      type: 'residential',\n      available: true\n    },\n    {\n      id: 'spot_5',\n      name: 'Versova Beach',\n      address: 'Versova, Andheri West',\n      coordinates: [19.1314, 72.8137],\n      distance: '300m',\n      walkTime: '4 min walk',\n      type: 'recreational',\n      available: true\n    },\n    {\n      id: 'spot_6',\n      name: 'Four Bungalows',\n      address: 'Four Bungalows, Andheri West',\n      coordinates: [19.1180, 72.8226],\n      distance: '250m',\n      walkTime: '3 min walk',\n      type: 'residential',\n      available: true\n    },\n    {\n      id: 'spot_7',\n      name: 'MIDC Central Road',\n      address: 'MIDC, Andheri East',\n      coordinates: [19.1136, 72.8697],\n      distance: '400m',\n      walkTime: '5 min walk',\n      type: 'industrial',\n      available: true\n    }\n  ];\n\n  // Andheri West address suggestions\n  const sampleAddresses = [\n    'Andheri Metro Station, Andheri West, Mumbai, Maharashtra',\n    'Infiniti Mall, New Link Road, Andheri West, Mumbai',\n    'Lokhandwala Complex, Andheri West, Mumbai, Maharashtra',\n    'Oshiwara Bus Depot, Oshiwara, Andheri West, Mumbai',\n    'Versova Beach, Versova, Andheri West, Mumbai',\n    'Four Bungalows, Andheri West, Mumbai, Maharashtra',\n    'MIDC Central Road, Andheri East, Mumbai, Maharashtra'\n  ];\n\n  // Load location data from localStorage on mount\n  useEffect(() => {\n    const savedLocation = localStorage.getItem('drogo_location');\n    if (savedLocation) {\n      try {\n        const locationData = JSON.parse(savedLocation);\n        setSelectedAddress(locationData.selectedAddress || '');\n        setTerraceAccessible(locationData.terraceAccessible || false);\n        setUserLocation(locationData.userLocation || null);\n        setSelectedDeliverySpot(locationData.selectedDeliverySpot || null);\n      } catch (error) {\n        console.error('Error parsing saved location data:', error);\n        localStorage.removeItem('drogo_location');\n      }\n    }\n  }, []);\n\n  // Save location data to localStorage whenever it changes\n  useEffect(() => {\n    const locationData = {\n      selectedAddress,\n      terraceAccessible,\n      userLocation,\n      selectedDeliverySpot\n    };\n    localStorage.setItem('drogo_location', JSON.stringify(locationData));\n  }, [selectedAddress, terraceAccessible, userLocation, selectedDeliverySpot]);\n\n  const searchAddresses = async (query) => {\n    if (!query || query.length < 3) {\n      setSearchResults([]);\n      return [];\n    }\n\n    setIsSearching(true);\n    try {\n      // Simulate real address search - in production, use Google Places API or similar\n      const mockResults = [\n        ...sampleAddresses.filter(addr => \n          addr.toLowerCase().includes(query.toLowerCase())\n        ).map(addr => ({\n          formatted_address: addr,\n          place_id: `mock_${addr.replace(/\\s+/g, '_')}`,\n          geometry: {\n            location: {\n              lat: deliverySpots.find(spot => \n                addr.toLowerCase().includes(spot.name.toLowerCase())\n              )?.coordinates[0] || 19.1197,\n              lng: deliverySpots.find(spot => \n                addr.toLowerCase().includes(spot.name.toLowerCase())\n              )?.coordinates[1] || 72.8464\n            }\n          }\n        }))\n      ];\n\n      // Add some mock non-serviceable areas\n      if (query.toLowerCase().includes('bandra') || \n          query.toLowerCase().includes('powai') || \n          query.toLowerCase().includes('worli')) {\n        mockResults.push({\n          formatted_address: `${query}, Mumbai, Maharashtra, India`,\n          place_id: `mock_non_serviceable_${query}`,\n          geometry: {\n            location: {\n              lat: 19.0596,\n              lng: 72.8295\n            }\n          }\n        });\n      }\n\n      setSearchResults(mockResults);\n      return mockResults;\n    } catch (error) {\n      console.error('Address search error:', error);\n      toast.error('Unable to search addresses. Please try again.');\n      return [];\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  const updateAddress = (address) => {\n    setSelectedAddress(address);\n    \n    // Check if address is in serviceable area\n    const isServiceable = checkServiceableArea(address);\n    \n    if (isServiceable && address && address.length > 5) {\n      setTimeout(() => {\n        setIsMapVisible(true);\n      }, 800);\n      // Reset delivery spot when address changes\n      setSelectedDeliverySpot(null);\n    } else if (address && address.length > 5 && !isServiceable) {\n      // Show intent form for non-serviceable areas\n      setShowIntentForm(true);\n      setIsMapVisible(false);\n      setSelectedDeliverySpot(null);\n    } else {\n      setIsMapVisible(false);\n      setSelectedDeliverySpot(null);\n    }\n  };\n\n  const checkServiceableArea = (address) => {\n    if (!address) return false;\n    const lowerAddress = address.toLowerCase();\n    const serviceableAreas = [\n      'andheri west', 'andheri', 'lokhandwala', 'oshiwara', \n      'versova', 'four bungalows', 'midc', 'infiniti mall'\n    ];\n    return serviceableAreas.some(area => lowerAddress.includes(area));\n  };\n\n  const updateTerraceAccessibility = (accessible) => {\n    setTerraceAccessible(accessible);\n    \n    if (accessible) {\n      toast.success('Great! This will help us deliver faster 🚁', {\n        autoClose: 3000\n      });\n    }\n  };\n\n  const getCurrentLocation = () => {\n    return new Promise((resolve, reject) => {\n      if (!navigator.geolocation) {\n        reject(new Error('Geolocation not supported'));\n        return;\n      }\n\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const coords = [position.coords.latitude, position.coords.longitude];\n          setUserLocation(coords);\n          \n          // Mock reverse geocoding - in production use actual geocoding service\n          const mockAddress = 'BITS Pilani, Navi Mumbai, Maharashtra, India';\n          setSelectedAddress(mockAddress);\n          \n          toast.success('Location detected successfully! 📍');\n          resolve(coords);\n        },\n        (error) => {\n          console.error('Geolocation error:', error);\n          toast.error('Unable to get location. Please enter manually.');\n          reject(error);\n        },\n        {\n          enableHighAccuracy: true,\n          timeout: 10000,\n          maximumAge: 60000\n        }\n      );\n    });\n  };\n\n  const selectDeliverySpot = (spotId) => {\n    const spot = deliverySpots.find(s => s.id === spotId);\n    if (!spot || !spot.available) {\n      toast.error('This delivery spot is not available');\n      return false;\n    }\n    \n    setSelectedDeliverySpot(spot);\n    toast.success(`Selected: ${spot.name} 📍`);\n    return true;\n  };\n\n  const confirmDeliverySpot = () => {\n    if (!selectedDeliverySpot) {\n      toast.error('Please select a delivery spot first');\n      return false;\n    }\n    \n    // Send data to backend (mock implementation)\n    sendDeliverySpotToBackend();\n    \n    toast.success(`Delivery spot confirmed: ${selectedDeliverySpot.name} ✅`);\n    return true;\n  };\n\n  const sendDeliverySpotToBackend = () => {\n    const payload = {\n      user_address: selectedAddress,\n      user_location: userLocation,\n      delivery_spot: selectedDeliverySpot ? {\n        id: selectedDeliverySpot.id,\n        name: selectedDeliverySpot.name,\n        coordinates: selectedDeliverySpot.coordinates,\n        type: selectedDeliverySpot.type\n      } : null,\n      terrace_accessible: terraceAccessible,\n      timestamp: new Date().toISOString()\n    };\n    \n    console.log('📡 Sending delivery spot data to backend:', payload);\n    \n    // In production, make actual API call:\n    // fetch('/api/delivery-spots/select', {\n    //   method: 'POST',\n    //   headers: { 'Content-Type': 'application/json' },\n    //   body: JSON.stringify(payload)\n    // });\n    \n    toast.info('Delivery preferences saved! 💾');\n    return payload;\n  };\n\n  const getFilteredAddresses = (query) => {\n    if (!query || query.length < 2) return [];\n    \n    return sampleAddresses.filter(address => \n      address.toLowerCase().includes(query.toLowerCase())\n    );\n  };\n\n  const isAddressValid = () => {\n    return selectedAddress && selectedAddress.length > 5;\n  };\n\n  const canProceed = () => {\n    const hasValidAddress = isAddressValid();\n    const hasServiceableArea = checkServiceableArea(selectedAddress);\n    const hasDeliverySpot = selectedDeliverySpot !== null;\n    \n    return hasValidAddress && hasServiceableArea && hasDeliverySpot;\n  };\n\n  const submitIntentForm = async (formData) => {\n    try {\n      // Mock API call - in production, send to your backend\n      console.log('📝 Intent form submitted:', formData);\n      \n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      toast.success('Thank you! We\\'ll notify you when DroGo launches in your area! 🚁');\n      setShowIntentForm(false);\n      \n      // Store intent in localStorage for demo\n      const existingIntents = JSON.parse(localStorage.getItem('drogo_intents') || '[]');\n      existingIntents.push({\n        ...formData,\n        timestamp: new Date().toISOString(),\n        id: Date.now()\n      });\n      localStorage.setItem('drogo_intents', JSON.stringify(existingIntents));\n      \n      return true;\n    } catch (error) {\n      console.error('Intent form submission error:', error);\n      toast.error('Something went wrong. Please try again.');\n      return false;\n    }\n  };\n\n  const resetLocation = () => {\n    setSelectedAddress('');\n    setTerraceAccessible(false);\n    setUserLocation(null);\n    setSelectedDeliverySpot(null);\n    setIsMapVisible(false);\n    setShowIntentForm(false);\n    setSearchResults([]);\n    localStorage.removeItem('drogo_location');\n  };\n\n  const value = {\n    // State\n    selectedAddress,\n    terraceAccessible,\n    userLocation,\n    selectedDeliverySpot,\n    isMapVisible,\n    showIntentForm,\n    isSearching,\n    searchResults,\n    deliverySpots,\n    sampleAddresses,\n    \n    // Actions\n    updateAddress,\n    updateTerraceAccessibility,\n    getCurrentLocation,\n    selectDeliverySpot,\n    confirmDeliverySpot,\n    sendDeliverySpotToBackend,\n    getFilteredAddresses,\n    searchAddresses,\n    submitIntentForm,\n    resetLocation,\n    \n    // Computed\n    isAddressValid,\n    canProceed,\n    \n    // Map controls\n    setIsMapVisible,\n    setShowIntentForm\n  };\n\n  return (\n    <LocationContext.Provider value={value}>\n      {children}\n    </LocationContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}