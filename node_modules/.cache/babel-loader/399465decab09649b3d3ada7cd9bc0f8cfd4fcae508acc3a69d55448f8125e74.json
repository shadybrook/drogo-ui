{"ast":null,"code":"import _objectSpread from\"/Users/chintandedhia/100xDevs/PropulsionTestData/Drogo_UI/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Push Notification Service for DroGo\n// Request notification permission\nexport const requestNotificationPermission=async()=>{if(!('Notification'in window)){console.warn('This browser does not support notifications');return false;}if(Notification.permission==='granted'){return true;}if(Notification.permission==='denied'){console.warn('Notifications are blocked by user');return false;}const permission=await Notification.requestPermission();return permission==='granted';};// Show local notification\nexport const showNotification=function(title){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(Notification.permission!=='granted'){console.warn('Notifications not permitted');return;}const defaultOptions={icon:'/icon-192x192.png',// Add this icon to your public folder\nbadge:'/icon-72x72.png',vibrate:[200,100,200],requireInteraction:true,tag:'drogo-notification'};const notification=new Notification(title,_objectSpread(_objectSpread({},defaultOptions),options));// Auto-close after 5 seconds if not clicked\nsetTimeout(()=>{notification.close();},5000);return notification;};// Order status notifications\nexport const notifyOrderStatus=function(status){var _orderDetails$id;let orderDetails=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const notifications={'confirmed':{title:'✅ Order Confirmed!',body:\"Your order #\".concat((_orderDetails$id=orderDetails.id)===null||_orderDetails$id===void 0?void 0:_orderDetails$id.slice(0,8),\" has been confirmed. Estimated delivery: \").concat(orderDetails.eta||'10 minutes'),icon:'🚁'},'preparing':{title:'📦 Order Being Prepared',body:'Your items are being packed with care. Drone dispatch soon!',icon:'📦'},'dispatched':{title:'🚁 Drone Dispatched!',body:\"Your order is on its way! Track your delivery in the app.\",icon:'🚁'},'in_transit':{title:'✈️ Almost There!',body:'Your drone is approaching the delivery location.',icon:'✈️'},'delivered':{title:'📦 Order Delivered!',body:'Your order has been delivered successfully. Enjoy your items!',icon:'🎉'}};const notification=notifications[status];if(notification){showNotification(notification.title,{body:notification.body,data:{orderId:orderDetails.id,status}});}};// Inventory notifications (for admins)\nexport const notifyLowStock=(productName,stock)=>{showNotification('⚠️ Low Stock Alert',{body:\"\".concat(productName,\" is running low (\").concat(stock,\" left). Consider restocking.\"),tag:'stock-alert'});};// Service worker registration for push notifications\nexport const registerServiceWorker=async()=>{if('serviceWorker'in navigator){try{const registration=await navigator.serviceWorker.register('/sw.js');console.log('Service Worker registered:',registration);return registration;}catch(error){console.error('Service Worker registration failed:',error);return null;}}return null;};// Initialize push notifications\nexport const initializePushNotifications=async()=>{const hasPermission=await requestNotificationPermission();if(hasPermission){await registerServiceWorker();console.log('Push notifications initialized');return true;}return false;};// Mock push server (for demo)\nexport const subscribeToPushNotifications=async userId=>{// In production, this would subscribe to a real push service\nconsole.log(\"Subscribed to push notifications for user: \".concat(userId));// Simulate receiving push notifications\nsetTimeout(()=>{showNotification('🎉 Welcome to DroGo!',{body:'You\\'ll receive live updates about your orders here.'});},2000);};// Browser notification click handler\nexport const handleNotificationClick=event=>{event.notification.close();const data=event.notification.data;if(data!==null&&data!==void 0&&data.orderId){// Focus the app window and navigate to orders\n// Note: clients is only available in service worker context\nif(typeof clients!=='undefined'&&clients.openWindow){clients.openWindow('/orders');}}};","map":{"version":3,"names":["requestNotificationPermission","window","console","warn","Notification","permission","requestPermission","showNotification","title","options","arguments","length","undefined","defaultOptions","icon","badge","vibrate","requireInteraction","tag","notification","_objectSpread","setTimeout","close","notifyOrderStatus","status","_orderDetails$id","orderDetails","notifications","body","concat","id","slice","eta","data","orderId","notifyLowStock","productName","stock","registerServiceWorker","navigator","registration","serviceWorker","register","log","error","initializePushNotifications","hasPermission","subscribeToPushNotifications","userId","handleNotificationClick","event","clients","openWindow"],"sources":["/Users/chintandedhia/100xDevs/PropulsionTestData/Drogo_UI/src/services/notifications.js"],"sourcesContent":["// Push Notification Service for DroGo\n\n// Request notification permission\nexport const requestNotificationPermission = async () => {\n  if (!('Notification' in window)) {\n    console.warn('This browser does not support notifications');\n    return false;\n  }\n\n  if (Notification.permission === 'granted') {\n    return true;\n  }\n\n  if (Notification.permission === 'denied') {\n    console.warn('Notifications are blocked by user');\n    return false;\n  }\n\n  const permission = await Notification.requestPermission();\n  return permission === 'granted';\n};\n\n// Show local notification\nexport const showNotification = (title, options = {}) => {\n  if (Notification.permission !== 'granted') {\n    console.warn('Notifications not permitted');\n    return;\n  }\n\n  const defaultOptions = {\n    icon: '/icon-192x192.png', // Add this icon to your public folder\n    badge: '/icon-72x72.png',\n    vibrate: [200, 100, 200],\n    requireInteraction: true,\n    tag: 'drogo-notification'\n  };\n\n  const notification = new Notification(title, {\n    ...defaultOptions,\n    ...options\n  });\n\n  // Auto-close after 5 seconds if not clicked\n  setTimeout(() => {\n    notification.close();\n  }, 5000);\n\n  return notification;\n};\n\n// Order status notifications\nexport const notifyOrderStatus = (status, orderDetails = {}) => {\n  const notifications = {\n    'confirmed': {\n      title: '✅ Order Confirmed!',\n      body: `Your order #${orderDetails.id?.slice(0, 8)} has been confirmed. Estimated delivery: ${orderDetails.eta || '10 minutes'}`,\n      icon: '🚁'\n    },\n    'preparing': {\n      title: '📦 Order Being Prepared',\n      body: 'Your items are being packed with care. Drone dispatch soon!',\n      icon: '📦'\n    },\n    'dispatched': {\n      title: '🚁 Drone Dispatched!',\n      body: `Your order is on its way! Track your delivery in the app.`,\n      icon: '🚁'\n    },\n    'in_transit': {\n      title: '✈️ Almost There!',\n      body: 'Your drone is approaching the delivery location.',\n      icon: '✈️'\n    },\n    'delivered': {\n      title: '📦 Order Delivered!',\n      body: 'Your order has been delivered successfully. Enjoy your items!',\n      icon: '🎉'\n    }\n  };\n\n  const notification = notifications[status];\n  if (notification) {\n    showNotification(notification.title, {\n      body: notification.body,\n      data: { orderId: orderDetails.id, status }\n    });\n  }\n};\n\n// Inventory notifications (for admins)\nexport const notifyLowStock = (productName, stock) => {\n  showNotification('⚠️ Low Stock Alert', {\n    body: `${productName} is running low (${stock} left). Consider restocking.`,\n    tag: 'stock-alert'\n  });\n};\n\n// Service worker registration for push notifications\nexport const registerServiceWorker = async () => {\n  if ('serviceWorker' in navigator) {\n    try {\n      const registration = await navigator.serviceWorker.register('/sw.js');\n      console.log('Service Worker registered:', registration);\n      return registration;\n    } catch (error) {\n      console.error('Service Worker registration failed:', error);\n      return null;\n    }\n  }\n  return null;\n};\n\n// Initialize push notifications\nexport const initializePushNotifications = async () => {\n  const hasPermission = await requestNotificationPermission();\n  if (hasPermission) {\n    await registerServiceWorker();\n    console.log('Push notifications initialized');\n    return true;\n  }\n  return false;\n};\n\n// Mock push server (for demo)\nexport const subscribeToPushNotifications = async (userId) => {\n  // In production, this would subscribe to a real push service\n  console.log(`Subscribed to push notifications for user: ${userId}`);\n  \n  // Simulate receiving push notifications\n  setTimeout(() => {\n    showNotification('🎉 Welcome to DroGo!', {\n      body: 'You\\'ll receive live updates about your orders here.',\n    });\n  }, 2000);\n};\n\n// Browser notification click handler\nexport const handleNotificationClick = (event) => {\n  event.notification.close();\n  \n  const data = event.notification.data;\n  if (data?.orderId) {\n    // Focus the app window and navigate to orders\n    // Note: clients is only available in service worker context\n    if (typeof clients !== 'undefined' && clients.openWindow) {\n      clients.openWindow('/orders');\n    }\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}