{"ast":null,"code":"var _jsxFileName = \"/Users/chintandedhia/100xDevs/PropulsionTestData/Drogo_UI/src/contexts/CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n// import { toast } from 'react-toastify'; // Removed - not used after removing notifications\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport const useCart = () => {\n  _s();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n_s(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const CartProvider = ({\n  children\n}) => {\n  _s2();\n  const [cartItems, setCartItems] = useState({});\n  const [isCartOpen, setIsCartOpen] = useState(false);\n\n  // Load cart from localStorage on mount\n  useEffect(() => {\n    const savedCart = localStorage.getItem('drogo_cart');\n    if (savedCart) {\n      try {\n        const cartData = JSON.parse(savedCart);\n        setCartItems(cartData);\n      } catch (error) {\n        console.error('Error parsing saved cart data:', error);\n        localStorage.removeItem('drogo_cart');\n      }\n    }\n  }, []);\n\n  // Save cart to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('drogo_cart', JSON.stringify(cartItems));\n  }, [cartItems]);\n  const addToCart = (productId, quantity = 1) => {\n    setCartItems(prev => ({\n      ...prev,\n      [productId]: (prev[productId] || 0) + quantity\n    }));\n\n    // Removed notification - not critical for user experience\n    // toast.success('Item added to cart! ðŸ›’', {\n    //   autoClose: 2000\n    // });\n  };\n  const updateQuantity = (productId, quantity) => {\n    if (quantity <= 0) {\n      removeFromCart(productId);\n      return;\n    }\n    setCartItems(prev => ({\n      ...prev,\n      [productId]: quantity\n    }));\n  };\n  const increaseQuantity = productId => {\n    setCartItems(prev => ({\n      ...prev,\n      [productId]: (prev[productId] || 0) + 1\n    }));\n  };\n  const decreaseQuantity = productId => {\n    setCartItems(prev => {\n      const currentQty = prev[productId] || 0;\n      if (currentQty <= 1) {\n        const {\n          [productId]: removed,\n          ...rest\n        } = prev;\n        // Don't show notification here since removeFromCart will be called\n        return rest;\n      }\n      return {\n        ...prev,\n        [productId]: currentQty - 1\n      };\n    });\n  };\n  const removeFromCart = productId => {\n    setCartItems(prev => {\n      const {\n        [productId]: removed,\n        ...rest\n      } = prev;\n      // Only show notification for explicit removals, not automatic ones\n      return rest;\n    });\n  };\n  const clearCart = () => {\n    setCartItems({});\n    // Removed notification - not critical, order success is more important\n    // toast.info('Cart cleared', { autoClose: 2000 });\n  };\n  const getCartTotal = productCatalog => {\n    let subtotal = 0;\n    let totalItems = 0;\n    Object.entries(cartItems).forEach(([productId, quantity]) => {\n      const product = productCatalog.find(p => p.id === productId);\n      if (product) {\n        subtotal += product.price * quantity;\n        totalItems += quantity;\n      }\n    });\n    const convenienceFee = subtotal > 0 ? 19 : 0;\n    const tax = Math.round(subtotal * 0.05);\n    const total = subtotal + convenienceFee + tax;\n    return {\n      subtotal,\n      convenienceFee,\n      tax,\n      total,\n      totalItems\n    };\n  };\n  const getTotalItems = () => {\n    return Object.values(cartItems).reduce((sum, qty) => sum + qty, 0);\n  };\n  const isItemInCart = productId => {\n    return cartItems[productId] > 0;\n  };\n  const getItemQuantity = productId => {\n    return cartItems[productId] || 0;\n  };\n  const openCart = () => {\n    setIsCartOpen(true);\n  };\n  const closeCart = () => {\n    setIsCartOpen(false);\n  };\n  const value = {\n    cartItems,\n    isCartOpen,\n    addToCart,\n    updateQuantity,\n    increaseQuantity,\n    decreaseQuantity,\n    removeFromCart,\n    clearCart,\n    getCartTotal,\n    getTotalItems,\n    isItemInCart,\n    getItemQuantity,\n    openCart,\n    closeCart\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n_s2(CartProvider, \"kWZVd+ZpJFHntGLlOHtNAWlAZqA=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","CartContext","useCart","_s","context","Error","CartProvider","children","_s2","cartItems","setCartItems","isCartOpen","setIsCartOpen","savedCart","localStorage","getItem","cartData","JSON","parse","error","console","removeItem","setItem","stringify","addToCart","productId","quantity","prev","updateQuantity","removeFromCart","increaseQuantity","decreaseQuantity","currentQty","removed","rest","clearCart","getCartTotal","productCatalog","subtotal","totalItems","Object","entries","forEach","product","find","p","id","price","convenienceFee","tax","Math","round","total","getTotalItems","values","reduce","sum","qty","isItemInCart","getItemQuantity","openCart","closeCart","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/chintandedhia/100xDevs/PropulsionTestData/Drogo_UI/src/contexts/CartContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n// import { toast } from 'react-toastify'; // Removed - not used after removing notifications\n\nconst CartContext = createContext();\n\nexport const useCart = () => {\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n\nexport const CartProvider = ({ children }) => {\n  const [cartItems, setCartItems] = useState({});\n  const [isCartOpen, setIsCartOpen] = useState(false);\n\n  // Load cart from localStorage on mount\n  useEffect(() => {\n    const savedCart = localStorage.getItem('drogo_cart');\n    if (savedCart) {\n      try {\n        const cartData = JSON.parse(savedCart);\n        setCartItems(cartData);\n      } catch (error) {\n        console.error('Error parsing saved cart data:', error);\n        localStorage.removeItem('drogo_cart');\n      }\n    }\n  }, []);\n\n  // Save cart to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('drogo_cart', JSON.stringify(cartItems));\n  }, [cartItems]);\n\n  const addToCart = (productId, quantity = 1) => {\n    setCartItems(prev => ({\n      ...prev,\n      [productId]: (prev[productId] || 0) + quantity\n    }));\n    \n    // Removed notification - not critical for user experience\n    // toast.success('Item added to cart! ðŸ›’', {\n    //   autoClose: 2000\n    // });\n  };\n\n  const updateQuantity = (productId, quantity) => {\n    if (quantity <= 0) {\n      removeFromCart(productId);\n      return;\n    }\n    \n    setCartItems(prev => ({\n      ...prev,\n      [productId]: quantity\n    }));\n  };\n\n  const increaseQuantity = (productId) => {\n    setCartItems(prev => ({\n      ...prev,\n      [productId]: (prev[productId] || 0) + 1\n    }));\n  };\n\n  const decreaseQuantity = (productId) => {\n    setCartItems(prev => {\n      const currentQty = prev[productId] || 0;\n      if (currentQty <= 1) {\n        const { [productId]: removed, ...rest } = prev;\n        // Don't show notification here since removeFromCart will be called\n        return rest;\n      }\n      return {\n        ...prev,\n        [productId]: currentQty - 1\n      };\n    });\n  };\n\n  const removeFromCart = (productId) => {\n    setCartItems(prev => {\n      const { [productId]: removed, ...rest } = prev;\n      // Only show notification for explicit removals, not automatic ones\n      return rest;\n    });\n  };\n\n  const clearCart = () => {\n    setCartItems({});\n    // Removed notification - not critical, order success is more important\n    // toast.info('Cart cleared', { autoClose: 2000 });\n  };\n\n  const getCartTotal = (productCatalog) => {\n    let subtotal = 0;\n    let totalItems = 0;\n    \n    Object.entries(cartItems).forEach(([productId, quantity]) => {\n      const product = productCatalog.find(p => p.id === productId);\n      if (product) {\n        subtotal += product.price * quantity;\n        totalItems += quantity;\n      }\n    });\n    \n    const convenienceFee = subtotal > 0 ? 19 : 0;\n    const tax = Math.round(subtotal * 0.05);\n    const total = subtotal + convenienceFee + tax;\n    \n    return {\n      subtotal,\n      convenienceFee,\n      tax,\n      total,\n      totalItems\n    };\n  };\n\n  const getTotalItems = () => {\n    return Object.values(cartItems).reduce((sum, qty) => sum + qty, 0);\n  };\n\n  const isItemInCart = (productId) => {\n    return cartItems[productId] > 0;\n  };\n\n  const getItemQuantity = (productId) => {\n    return cartItems[productId] || 0;\n  };\n\n  const openCart = () => {\n    setIsCartOpen(true);\n  };\n\n  const closeCart = () => {\n    setIsCartOpen(false);\n  };\n\n  const value = {\n    cartItems,\n    isCartOpen,\n    addToCart,\n    updateQuantity,\n    increaseQuantity,\n    decreaseQuantity,\n    removeFromCart,\n    clearCart,\n    getCartTotal,\n    getTotalItems,\n    isItemInCart,\n    getItemQuantity,\n    openCart,\n    closeCart\n  };\n\n  return (\n    <CartContext.Provider value={value}>\n      {children}\n    </CartContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}