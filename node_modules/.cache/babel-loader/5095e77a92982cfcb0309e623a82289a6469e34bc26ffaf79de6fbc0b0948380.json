{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{useAuth}from'./AuthContext';import{createOrder,getUserOrders,subscribeToOrders,updateOrderStatus}from'../services/database';import{initializePushNotifications,notifyOrderStatus,subscribeToPushNotifications}from'../services/notifications';import{toast}from'react-toastify';import{jsx as _jsx}from\"react/jsx-runtime\";const OrderContext=/*#__PURE__*/createContext();export const useOrders=()=>{const context=useContext(OrderContext);if(!context){throw new Error('useOrders must be used within an OrderProvider');}return context;};export const OrderProvider=_ref=>{let{children}=_ref;const{user}=useAuth();const[orders,setOrders]=useState([]);const[currentOrder,setCurrentOrder]=useState(null);const[loading,setLoading]=useState(false);// Initialize push notifications and fetch orders on login\nuseEffect(()=>{if(user!==null&&user!==void 0&&user.id){fetchUserOrders();// Initialize push notifications for user\ninitializePushNotifications().then(success=>{if(success){subscribeToPushNotifications(user.id);}});}else{setOrders([]);setCurrentOrder(null);}},[user]);// Subscribe to real-time order updates\nuseEffect(()=>{if(!(user!==null&&user!==void 0&&user.id))return;const unsubscribe=subscribeToOrders(user.id,updatedOrders=>{if(Array.isArray(updatedOrders)){setOrders(updatedOrders);// Update current order if it exists\nif(currentOrder){const updated=updatedOrders.find(o=>o.id===currentOrder.id);if(updated){setCurrentOrder(updated);// Show notification for status changes\nif(updated.status!==currentOrder.status){showStatusNotification(updated.status);// Also send push notification\nnotifyOrderStatus(updated.status,updated);}}}}});return unsubscribe;},[user,currentOrder]);const fetchUserOrders=async()=>{if(!(user!==null&&user!==void 0&&user.id))return;setLoading(true);try{const{data,error}=await getUserOrders(user.id);if(error){console.error('Error fetching orders:',error);toast.error('Failed to load orders');}else{setOrders(data||[]);// Set current order to the most recent pending order\nconst pendingOrder=data===null||data===void 0?void 0:data.find(order=>['confirmed','preparing','dispatched'].includes(order.status));if(pendingOrder){setCurrentOrder(pendingOrder);}}}catch(error){console.error('Error fetching orders:',error);toast.error('Failed to load orders');}finally{setLoading(false);}};const placeOrder=async orderData=>{if(!(user!==null&&user!==void 0&&user.id)){toast.error('Please sign in to place an order');return{success:false};}setLoading(true);try{const{data,error}=await createOrder({user_id:user.id,total_amount:orderData.total,delivery_address:orderData.address,delivery_spot:orderData.deliverySpot,terrace_accessible:orderData.terraceAccessible,items:orderData.items});if(error){console.error('Error placing order:',error);toast.error('Failed to place order. Please try again.');return{success:false,error};}// Update local state\nsetOrders(prev=>[data,...prev]);setCurrentOrder(data);toast.success('Order placed successfully! 🚁');// Start order status simulation for demo\nif(data!==null&&data!==void 0&&data.id){simulateOrderProgress(data.id);}return{success:true,orderId:data.id};}catch(error){console.error('Error placing order:',error);toast.error('Failed to place order. Please try again.');return{success:false,error};}finally{setLoading(false);}};// Simulate order progress for demo purposes\nconst simulateOrderProgress=async orderId=>{const statuses=[{status:'preparing',delay:2000,message:'📦 Order is being prepared'},{status:'dispatched',delay:5000,message:'🚁 Drone dispatched!'},{status:'in_transit',delay:8000,message:'✈️ On the way to you'},{status:'delivered',delay:10000,message:'📦 Order delivered!'}];for(const{status,delay,message}of statuses){setTimeout(async()=>{const{data,error}=await updateOrderStatus(orderId,status);if(!error&&data){setCurrentOrder(data);setOrders(prev=>prev.map(order=>order.id===orderId?data:order));toast.info(message,{autoClose:3000});}},delay);}};const showStatusNotification=status=>{const messages={'confirmed':'✅ Order confirmed','preparing':'📦 Preparing your order','dispatched':'🚁 Drone dispatched','in_transit':'✈️ On the way','delivered':'📦 Delivered!','cancelled':'❌ Order cancelled'};const message=messages[status]||\"Order status: \".concat(status);toast.info(message,{autoClose:3000});};const getOrderStatus=order=>{if(!order)return{text:'No active order',color:'#64748b'};const statusConfig={'confirmed':{text:'Order Confirmed',color:'#10b981'},'preparing':{text:'Preparing',color:'#f59e0b'},'dispatched':{text:'Drone Dispatched',color:'#3b82f6'},'in_transit':{text:'In Transit',color:'#6366f1'},'delivered':{text:'Delivered',color:'#10b981'},'cancelled':{text:'Cancelled',color:'#ef4444'}};return statusConfig[order.status]||{text:order.status,color:'#64748b'};};const getEstimatedDeliveryTime=order=>{if(!(order!==null&&order!==void 0&&order.estimated_delivery))return null;const deliveryTime=new Date(order.estimated_delivery);const now=new Date();const diffMinutes=Math.ceil((deliveryTime-now)/(1000*60));if(diffMinutes<=0)return'Arriving now!';if(diffMinutes===1)return'1 minute';return\"\".concat(diffMinutes,\" minutes\");};const value={orders,currentOrder,loading,placeOrder,fetchUserOrders,getOrderStatus,getEstimatedDeliveryTime,updateOrderStatus:async(orderId,status)=>{const{data,error}=await updateOrderStatus(orderId,status);if(!error&&data){setOrders(prev=>prev.map(order=>order.id===orderId?data:order));if((currentOrder===null||currentOrder===void 0?void 0:currentOrder.id)===orderId){setCurrentOrder(data);}}return{data,error};}};return/*#__PURE__*/_jsx(OrderContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","createOrder","getUserOrders","subscribeToOrders","updateOrderStatus","initializePushNotifications","notifyOrderStatus","subscribeToPushNotifications","toast","jsx","_jsx","OrderContext","useOrders","context","Error","OrderProvider","_ref","children","user","orders","setOrders","currentOrder","setCurrentOrder","loading","setLoading","id","fetchUserOrders","then","success","unsubscribe","updatedOrders","Array","isArray","updated","find","o","status","showStatusNotification","data","error","console","pendingOrder","order","includes","placeOrder","orderData","user_id","total_amount","total","delivery_address","address","delivery_spot","deliverySpot","terrace_accessible","terraceAccessible","items","prev","simulateOrderProgress","orderId","statuses","delay","message","setTimeout","map","info","autoClose","messages","concat","getOrderStatus","text","color","statusConfig","getEstimatedDeliveryTime","estimated_delivery","deliveryTime","Date","now","diffMinutes","Math","ceil","value","Provider"],"sources":["/Users/chintandedhia/100xDevs/PropulsionTestData/Drogo_UI/src/contexts/OrderContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { \n  createOrder, \n  getUserOrders, \n  subscribeToOrders,\n  updateOrderStatus\n} from '../services/database';\nimport { \n  initializePushNotifications, \n  notifyOrderStatus, \n  subscribeToPushNotifications \n} from '../services/notifications';\nimport { toast } from 'react-toastify';\n\nconst OrderContext = createContext();\n\nexport const useOrders = () => {\n  const context = useContext(OrderContext);\n  if (!context) {\n    throw new Error('useOrders must be used within an OrderProvider');\n  }\n  return context;\n};\n\nexport const OrderProvider = ({ children }) => {\n  const { user } = useAuth();\n  const [orders, setOrders] = useState([]);\n  const [currentOrder, setCurrentOrder] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  // Initialize push notifications and fetch orders on login\n  useEffect(() => {\n    if (user?.id) {\n      fetchUserOrders();\n      \n      // Initialize push notifications for user\n      initializePushNotifications().then((success) => {\n        if (success) {\n          subscribeToPushNotifications(user.id);\n        }\n      });\n    } else {\n      setOrders([]);\n      setCurrentOrder(null);\n    }\n  }, [user]);\n\n  // Subscribe to real-time order updates\n  useEffect(() => {\n    if (!user?.id) return;\n\n    const unsubscribe = subscribeToOrders(user.id, (updatedOrders) => {\n      if (Array.isArray(updatedOrders)) {\n        setOrders(updatedOrders);\n        // Update current order if it exists\n        if (currentOrder) {\n          const updated = updatedOrders.find(o => o.id === currentOrder.id);\n          if (updated) {\n            setCurrentOrder(updated);\n            // Show notification for status changes\n            if (updated.status !== currentOrder.status) {\n              showStatusNotification(updated.status);\n              // Also send push notification\n              notifyOrderStatus(updated.status, updated);\n            }\n          }\n        }\n      }\n    });\n\n    return unsubscribe;\n  }, [user, currentOrder]);\n\n  const fetchUserOrders = async () => {\n    if (!user?.id) return;\n    \n    setLoading(true);\n    try {\n      const { data, error } = await getUserOrders(user.id);\n      if (error) {\n        console.error('Error fetching orders:', error);\n        toast.error('Failed to load orders');\n      } else {\n        setOrders(data || []);\n        // Set current order to the most recent pending order\n        const pendingOrder = data?.find(order => \n          ['confirmed', 'preparing', 'dispatched'].includes(order.status)\n        );\n        if (pendingOrder) {\n          setCurrentOrder(pendingOrder);\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching orders:', error);\n      toast.error('Failed to load orders');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const placeOrder = async (orderData) => {\n    if (!user?.id) {\n      toast.error('Please sign in to place an order');\n      return { success: false };\n    }\n\n    setLoading(true);\n    try {\n      const { data, error } = await createOrder({\n        user_id: user.id,\n        total_amount: orderData.total,\n        delivery_address: orderData.address,\n        delivery_spot: orderData.deliverySpot,\n        terrace_accessible: orderData.terraceAccessible,\n        items: orderData.items\n      });\n\n      if (error) {\n        console.error('Error placing order:', error);\n        toast.error('Failed to place order. Please try again.');\n        return { success: false, error };\n      }\n\n      // Update local state\n      setOrders(prev => [data, ...prev]);\n      setCurrentOrder(data);\n      \n      toast.success('Order placed successfully! 🚁');\n      \n      // Start order status simulation for demo\n      if (data?.id) {\n        simulateOrderProgress(data.id);\n      }\n\n      return { success: true, orderId: data.id };\n    } catch (error) {\n      console.error('Error placing order:', error);\n      toast.error('Failed to place order. Please try again.');\n      return { success: false, error };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Simulate order progress for demo purposes\n  const simulateOrderProgress = async (orderId) => {\n    const statuses = [\n      { status: 'preparing', delay: 2000, message: '📦 Order is being prepared' },\n      { status: 'dispatched', delay: 5000, message: '🚁 Drone dispatched!' },\n      { status: 'in_transit', delay: 8000, message: '✈️ On the way to you' },\n      { status: 'delivered', delay: 10000, message: '📦 Order delivered!' }\n    ];\n\n    for (const { status, delay, message } of statuses) {\n      setTimeout(async () => {\n        const { data, error } = await updateOrderStatus(orderId, status);\n        if (!error && data) {\n          setCurrentOrder(data);\n          setOrders(prev => prev.map(order => \n            order.id === orderId ? data : order\n          ));\n          toast.info(message, { autoClose: 3000 });\n        }\n      }, delay);\n    }\n  };\n\n  const showStatusNotification = (status) => {\n    const messages = {\n      'confirmed': '✅ Order confirmed',\n      'preparing': '📦 Preparing your order',\n      'dispatched': '🚁 Drone dispatched',\n      'in_transit': '✈️ On the way',\n      'delivered': '📦 Delivered!',\n      'cancelled': '❌ Order cancelled'\n    };\n\n    const message = messages[status] || `Order status: ${status}`;\n    toast.info(message, { autoClose: 3000 });\n  };\n\n  const getOrderStatus = (order) => {\n    if (!order) return { text: 'No active order', color: '#64748b' };\n\n    const statusConfig = {\n      'confirmed': { text: 'Order Confirmed', color: '#10b981' },\n      'preparing': { text: 'Preparing', color: '#f59e0b' },\n      'dispatched': { text: 'Drone Dispatched', color: '#3b82f6' },\n      'in_transit': { text: 'In Transit', color: '#6366f1' },\n      'delivered': { text: 'Delivered', color: '#10b981' },\n      'cancelled': { text: 'Cancelled', color: '#ef4444' }\n    };\n\n    return statusConfig[order.status] || { text: order.status, color: '#64748b' };\n  };\n\n  const getEstimatedDeliveryTime = (order) => {\n    if (!order?.estimated_delivery) return null;\n\n    const deliveryTime = new Date(order.estimated_delivery);\n    const now = new Date();\n    const diffMinutes = Math.ceil((deliveryTime - now) / (1000 * 60));\n\n    if (diffMinutes <= 0) return 'Arriving now!';\n    if (diffMinutes === 1) return '1 minute';\n    return `${diffMinutes} minutes`;\n  };\n\n  const value = {\n    orders,\n    currentOrder,\n    loading,\n    placeOrder,\n    fetchUserOrders,\n    getOrderStatus,\n    getEstimatedDeliveryTime,\n    updateOrderStatus: async (orderId, status) => {\n      const { data, error } = await updateOrderStatus(orderId, status);\n      if (!error && data) {\n        setOrders(prev => prev.map(order => \n          order.id === orderId ? data : order\n        ));\n        if (currentOrder?.id === orderId) {\n          setCurrentOrder(data);\n        }\n      }\n      return { data, error };\n    }\n  };\n\n  return (\n    <OrderContext.Provider value={value}>\n      {children}\n    </OrderContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}