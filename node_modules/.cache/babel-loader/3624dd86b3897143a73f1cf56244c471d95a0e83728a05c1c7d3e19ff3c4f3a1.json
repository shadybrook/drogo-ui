{"ast":null,"code":"var _jsxFileName = \"/Users/chintandedhia/100xDevs/PropulsionTestData/Drogo_UI/src/contexts/LocationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LocationContext = /*#__PURE__*/createContext();\nexport const useLocation = () => {\n  _s();\n  const context = useContext(LocationContext);\n  if (!context) {\n    throw new Error('useLocation must be used within a LocationProvider');\n  }\n  return context;\n};\n_s(useLocation, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const LocationProvider = ({\n  children\n}) => {\n  _s2();\n  const [selectedAddress, setSelectedAddress] = useState('');\n  const [terraceAccessible, setTerraceAccessible] = useState(false);\n  const [userLocation, setUserLocation] = useState(null);\n  const [selectedDeliverySpot, setSelectedDeliverySpot] = useState(null);\n  const [isMapVisible, setIsMapVisible] = useState(false);\n\n  // Sample delivery spots (same as original)\n  const deliverySpots = [{\n    id: 'spot_1',\n    name: 'BITS Main Gate',\n    address: 'Main Entrance, BITS Pilani',\n    coordinates: [19.0760, 72.8777],\n    distance: '50m',\n    walkTime: '1 min walk',\n    type: 'main_entrance',\n    available: true\n  }, {\n    id: 'spot_2',\n    name: 'Academic Block',\n    address: 'Near Library, Academic Complex',\n    coordinates: [19.0765, 72.8785],\n    distance: '120m',\n    walkTime: '2 min walk',\n    type: 'academic',\n    available: true\n  }, {\n    id: 'spot_3',\n    name: 'Hostel Block A',\n    address: 'Student Accommodation Area',\n    coordinates: [19.0755, 72.8770],\n    distance: '80m',\n    walkTime: '1 min walk',\n    type: 'residential',\n    available: true\n  }, {\n    id: 'spot_4',\n    name: 'Food Court',\n    address: 'Central Dining Area',\n    coordinates: [19.0770, 72.8780],\n    distance: '200m',\n    walkTime: '3 min walk',\n    type: 'dining',\n    available: true\n  }, {\n    id: 'spot_5',\n    name: 'Sports Complex',\n    address: 'Near Basketball Court',\n    coordinates: [19.0748, 72.8790],\n    distance: '300m',\n    walkTime: '4 min walk',\n    type: 'sports',\n    available: false\n  }];\n\n  // Sample address suggestions\n  const sampleAddresses = ['BITS Pilani, K K Birla Goa Campus, Zuarinagar, Goa', 'BITS Pilani, Dubai Campus, Dubai International Academic City', 'BITS Pilani, Pilani Campus, Rajasthan', 'BITS Pilani, Hyderabad Campus, Telangana', 'Navi Mumbai, Maharashtra, India', 'Mumbai, Maharashtra, India'];\n\n  // Load location data from localStorage on mount\n  useEffect(() => {\n    const savedLocation = localStorage.getItem('drogo_location');\n    if (savedLocation) {\n      try {\n        const locationData = JSON.parse(savedLocation);\n        setSelectedAddress(locationData.selectedAddress || '');\n        setTerraceAccessible(locationData.terraceAccessible || false);\n        setUserLocation(locationData.userLocation || null);\n        setSelectedDeliverySpot(locationData.selectedDeliverySpot || null);\n      } catch (error) {\n        console.error('Error parsing saved location data:', error);\n        localStorage.removeItem('drogo_location');\n      }\n    }\n  }, []);\n\n  // Save location data to localStorage whenever it changes\n  useEffect(() => {\n    const locationData = {\n      selectedAddress,\n      terraceAccessible,\n      userLocation,\n      selectedDeliverySpot\n    };\n    localStorage.setItem('drogo_location', JSON.stringify(locationData));\n  }, [selectedAddress, terraceAccessible, userLocation, selectedDeliverySpot]);\n  const updateAddress = address => {\n    setSelectedAddress(address);\n\n    // Check if address is in serviceable area\n    const isServiceable = checkServiceableArea(address);\n    if (isServiceable && address && address.length > 5) {\n      setTimeout(() => {\n        setIsMapVisible(true);\n      }, 800);\n    } else if (address && address.length > 5 && !isServiceable) {\n      toast.error('Sorry, we don\\'t service this area yet. Try Mumbai, Navi Mumbai, or BITS Pilani areas.');\n      setIsMapVisible(false);\n      setSelectedDeliverySpot(null);\n    } else {\n      setIsMapVisible(false);\n      setSelectedDeliverySpot(null);\n    }\n  };\n  const checkServiceableArea = address => {\n    if (!address) return false;\n    const lowerAddress = address.toLowerCase();\n    const serviceableAreas = ['mumbai', 'navi mumbai', 'bits pilani', 'pilani', 'goa', 'zuarinagar', 'hyderabad', 'dubai', 'academic city'];\n    return serviceableAreas.some(area => lowerAddress.includes(area));\n  };\n  const updateTerraceAccessibility = accessible => {\n    setTerraceAccessible(accessible);\n    if (accessible) {\n      toast.success('Great! This will help us deliver faster 🚁', {\n        autoClose: 3000\n      });\n    }\n  };\n  const getCurrentLocation = () => {\n    return new Promise((resolve, reject) => {\n      if (!navigator.geolocation) {\n        reject(new Error('Geolocation not supported'));\n        return;\n      }\n      navigator.geolocation.getCurrentPosition(position => {\n        const coords = [position.coords.latitude, position.coords.longitude];\n        setUserLocation(coords);\n\n        // Mock reverse geocoding - in production use actual geocoding service\n        const mockAddress = 'BITS Pilani, Navi Mumbai, Maharashtra, India';\n        setSelectedAddress(mockAddress);\n        toast.success('Location detected successfully! 📍');\n        resolve(coords);\n      }, error => {\n        console.error('Geolocation error:', error);\n        toast.error('Unable to get location. Please enter manually.');\n        reject(error);\n      }, {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 60000\n      });\n    });\n  };\n  const selectDeliverySpot = spotId => {\n    const spot = deliverySpots.find(s => s.id === spotId);\n    if (!spot || !spot.available) {\n      toast.error('This delivery spot is not available');\n      return false;\n    }\n    setSelectedDeliverySpot(spot);\n    toast.success(`Selected: ${spot.name} 📍`);\n    return true;\n  };\n  const confirmDeliverySpot = () => {\n    if (!selectedDeliverySpot) {\n      toast.error('Please select a delivery spot first');\n      return false;\n    }\n\n    // Send data to backend (mock implementation)\n    sendDeliverySpotToBackend();\n    toast.success(`Delivery spot confirmed: ${selectedDeliverySpot.name} ✅`);\n    return true;\n  };\n  const sendDeliverySpotToBackend = () => {\n    const payload = {\n      user_address: selectedAddress,\n      user_location: userLocation,\n      delivery_spot: selectedDeliverySpot ? {\n        id: selectedDeliverySpot.id,\n        name: selectedDeliverySpot.name,\n        coordinates: selectedDeliverySpot.coordinates,\n        type: selectedDeliverySpot.type\n      } : null,\n      terrace_accessible: terraceAccessible,\n      timestamp: new Date().toISOString()\n    };\n    console.log('📡 Sending delivery spot data to backend:', payload);\n\n    // In production, make actual API call:\n    // fetch('/api/delivery-spots/select', {\n    //   method: 'POST',\n    //   headers: { 'Content-Type': 'application/json' },\n    //   body: JSON.stringify(payload)\n    // });\n\n    toast.info('Delivery preferences saved! 💾');\n    return payload;\n  };\n  const getFilteredAddresses = query => {\n    if (!query || query.length < 2) return [];\n    return sampleAddresses.filter(address => address.toLowerCase().includes(query.toLowerCase()));\n  };\n  const isAddressValid = () => {\n    return selectedAddress && selectedAddress.length > 5;\n  };\n  const canProceed = () => {\n    const hasValidAddress = isAddressValid();\n    const hasServiceableArea = checkServiceableArea(selectedAddress);\n\n    // Always require delivery spot selection if map is visible\n    if (isMapVisible && !selectedDeliverySpot) {\n      return false;\n    }\n    return hasValidAddress && hasServiceableArea;\n  };\n  const resetLocation = () => {\n    setSelectedAddress('');\n    setTerraceAccessible(false);\n    setUserLocation(null);\n    setSelectedDeliverySpot(null);\n    setIsMapVisible(false);\n    localStorage.removeItem('drogo_location');\n  };\n  const value = {\n    // State\n    selectedAddress,\n    terraceAccessible,\n    userLocation,\n    selectedDeliverySpot,\n    isMapVisible,\n    deliverySpots,\n    sampleAddresses,\n    // Actions\n    updateAddress,\n    updateTerraceAccessibility,\n    getCurrentLocation,\n    selectDeliverySpot,\n    confirmDeliverySpot,\n    sendDeliverySpotToBackend,\n    getFilteredAddresses,\n    resetLocation,\n    // Computed\n    isAddressValid,\n    canProceed,\n    // Map controls\n    setIsMapVisible\n  };\n  return /*#__PURE__*/_jsxDEV(LocationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 300,\n    columnNumber: 5\n  }, this);\n};\n_s2(LocationProvider, \"kpQOJbFh7LujsD7Et5ZT4lDnb8Q=\");\n_c = LocationProvider;\nvar _c;\n$RefreshReg$(_c, \"LocationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","toast","jsxDEV","_jsxDEV","LocationContext","useLocation","_s","context","Error","LocationProvider","children","_s2","selectedAddress","setSelectedAddress","terraceAccessible","setTerraceAccessible","userLocation","setUserLocation","selectedDeliverySpot","setSelectedDeliverySpot","isMapVisible","setIsMapVisible","deliverySpots","id","name","address","coordinates","distance","walkTime","type","available","sampleAddresses","savedLocation","localStorage","getItem","locationData","JSON","parse","error","console","removeItem","setItem","stringify","updateAddress","isServiceable","checkServiceableArea","length","setTimeout","lowerAddress","toLowerCase","serviceableAreas","some","area","includes","updateTerraceAccessibility","accessible","success","autoClose","getCurrentLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","mockAddress","enableHighAccuracy","timeout","maximumAge","selectDeliverySpot","spotId","spot","find","s","confirmDeliverySpot","sendDeliverySpotToBackend","payload","user_address","user_location","delivery_spot","terrace_accessible","timestamp","Date","toISOString","log","info","getFilteredAddresses","query","filter","isAddressValid","canProceed","hasValidAddress","hasServiceableArea","resetLocation","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/chintandedhia/100xDevs/PropulsionTestData/Drogo_UI/src/contexts/LocationContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\n\nconst LocationContext = createContext();\n\nexport const useLocation = () => {\n  const context = useContext(LocationContext);\n  if (!context) {\n    throw new Error('useLocation must be used within a LocationProvider');\n  }\n  return context;\n};\n\nexport const LocationProvider = ({ children }) => {\n  const [selectedAddress, setSelectedAddress] = useState('');\n  const [terraceAccessible, setTerraceAccessible] = useState(false);\n  const [userLocation, setUserLocation] = useState(null);\n  const [selectedDeliverySpot, setSelectedDeliverySpot] = useState(null);\n  const [isMapVisible, setIsMapVisible] = useState(false);\n\n  // Sample delivery spots (same as original)\n  const deliverySpots = [\n    {\n      id: 'spot_1',\n      name: 'BITS Main Gate',\n      address: 'Main Entrance, BITS Pilani',\n      coordinates: [19.0760, 72.8777],\n      distance: '50m',\n      walkTime: '1 min walk',\n      type: 'main_entrance',\n      available: true\n    },\n    {\n      id: 'spot_2', \n      name: 'Academic Block',\n      address: 'Near Library, Academic Complex',\n      coordinates: [19.0765, 72.8785],\n      distance: '120m',\n      walkTime: '2 min walk',\n      type: 'academic',\n      available: true\n    },\n    {\n      id: 'spot_3',\n      name: 'Hostel Block A',\n      address: 'Student Accommodation Area',\n      coordinates: [19.0755, 72.8770],\n      distance: '80m',\n      walkTime: '1 min walk',\n      type: 'residential',\n      available: true\n    },\n    {\n      id: 'spot_4',\n      name: 'Food Court',\n      address: 'Central Dining Area',\n      coordinates: [19.0770, 72.8780],\n      distance: '200m',\n      walkTime: '3 min walk',\n      type: 'dining',\n      available: true\n    },\n    {\n      id: 'spot_5',\n      name: 'Sports Complex',\n      address: 'Near Basketball Court',\n      coordinates: [19.0748, 72.8790],\n      distance: '300m',\n      walkTime: '4 min walk',\n      type: 'sports',\n      available: false\n    }\n  ];\n\n  // Sample address suggestions\n  const sampleAddresses = [\n    'BITS Pilani, K K Birla Goa Campus, Zuarinagar, Goa',\n    'BITS Pilani, Dubai Campus, Dubai International Academic City',\n    'BITS Pilani, Pilani Campus, Rajasthan',\n    'BITS Pilani, Hyderabad Campus, Telangana',\n    'Navi Mumbai, Maharashtra, India',\n    'Mumbai, Maharashtra, India'\n  ];\n\n  // Load location data from localStorage on mount\n  useEffect(() => {\n    const savedLocation = localStorage.getItem('drogo_location');\n    if (savedLocation) {\n      try {\n        const locationData = JSON.parse(savedLocation);\n        setSelectedAddress(locationData.selectedAddress || '');\n        setTerraceAccessible(locationData.terraceAccessible || false);\n        setUserLocation(locationData.userLocation || null);\n        setSelectedDeliverySpot(locationData.selectedDeliverySpot || null);\n      } catch (error) {\n        console.error('Error parsing saved location data:', error);\n        localStorage.removeItem('drogo_location');\n      }\n    }\n  }, []);\n\n  // Save location data to localStorage whenever it changes\n  useEffect(() => {\n    const locationData = {\n      selectedAddress,\n      terraceAccessible,\n      userLocation,\n      selectedDeliverySpot\n    };\n    localStorage.setItem('drogo_location', JSON.stringify(locationData));\n  }, [selectedAddress, terraceAccessible, userLocation, selectedDeliverySpot]);\n\n  const updateAddress = (address) => {\n    setSelectedAddress(address);\n    \n    // Check if address is in serviceable area\n    const isServiceable = checkServiceableArea(address);\n    \n    if (isServiceable && address && address.length > 5) {\n      setTimeout(() => {\n        setIsMapVisible(true);\n      }, 800);\n    } else if (address && address.length > 5 && !isServiceable) {\n      toast.error('Sorry, we don\\'t service this area yet. Try Mumbai, Navi Mumbai, or BITS Pilani areas.');\n      setIsMapVisible(false);\n      setSelectedDeliverySpot(null);\n    } else {\n      setIsMapVisible(false);\n      setSelectedDeliverySpot(null);\n    }\n  };\n\n  const checkServiceableArea = (address) => {\n    if (!address) return false;\n    const lowerAddress = address.toLowerCase();\n    const serviceableAreas = [\n      'mumbai', 'navi mumbai', 'bits pilani', 'pilani', 'goa', \n      'zuarinagar', 'hyderabad', 'dubai', 'academic city'\n    ];\n    return serviceableAreas.some(area => lowerAddress.includes(area));\n  };\n\n  const updateTerraceAccessibility = (accessible) => {\n    setTerraceAccessible(accessible);\n    \n    if (accessible) {\n      toast.success('Great! This will help us deliver faster 🚁', {\n        autoClose: 3000\n      });\n    }\n  };\n\n  const getCurrentLocation = () => {\n    return new Promise((resolve, reject) => {\n      if (!navigator.geolocation) {\n        reject(new Error('Geolocation not supported'));\n        return;\n      }\n\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const coords = [position.coords.latitude, position.coords.longitude];\n          setUserLocation(coords);\n          \n          // Mock reverse geocoding - in production use actual geocoding service\n          const mockAddress = 'BITS Pilani, Navi Mumbai, Maharashtra, India';\n          setSelectedAddress(mockAddress);\n          \n          toast.success('Location detected successfully! 📍');\n          resolve(coords);\n        },\n        (error) => {\n          console.error('Geolocation error:', error);\n          toast.error('Unable to get location. Please enter manually.');\n          reject(error);\n        },\n        {\n          enableHighAccuracy: true,\n          timeout: 10000,\n          maximumAge: 60000\n        }\n      );\n    });\n  };\n\n  const selectDeliverySpot = (spotId) => {\n    const spot = deliverySpots.find(s => s.id === spotId);\n    if (!spot || !spot.available) {\n      toast.error('This delivery spot is not available');\n      return false;\n    }\n    \n    setSelectedDeliverySpot(spot);\n    toast.success(`Selected: ${spot.name} 📍`);\n    return true;\n  };\n\n  const confirmDeliverySpot = () => {\n    if (!selectedDeliverySpot) {\n      toast.error('Please select a delivery spot first');\n      return false;\n    }\n    \n    // Send data to backend (mock implementation)\n    sendDeliverySpotToBackend();\n    \n    toast.success(`Delivery spot confirmed: ${selectedDeliverySpot.name} ✅`);\n    return true;\n  };\n\n  const sendDeliverySpotToBackend = () => {\n    const payload = {\n      user_address: selectedAddress,\n      user_location: userLocation,\n      delivery_spot: selectedDeliverySpot ? {\n        id: selectedDeliverySpot.id,\n        name: selectedDeliverySpot.name,\n        coordinates: selectedDeliverySpot.coordinates,\n        type: selectedDeliverySpot.type\n      } : null,\n      terrace_accessible: terraceAccessible,\n      timestamp: new Date().toISOString()\n    };\n    \n    console.log('📡 Sending delivery spot data to backend:', payload);\n    \n    // In production, make actual API call:\n    // fetch('/api/delivery-spots/select', {\n    //   method: 'POST',\n    //   headers: { 'Content-Type': 'application/json' },\n    //   body: JSON.stringify(payload)\n    // });\n    \n    toast.info('Delivery preferences saved! 💾');\n    return payload;\n  };\n\n  const getFilteredAddresses = (query) => {\n    if (!query || query.length < 2) return [];\n    \n    return sampleAddresses.filter(address => \n      address.toLowerCase().includes(query.toLowerCase())\n    );\n  };\n\n  const isAddressValid = () => {\n    return selectedAddress && selectedAddress.length > 5;\n  };\n\n  const canProceed = () => {\n    const hasValidAddress = isAddressValid();\n    const hasServiceableArea = checkServiceableArea(selectedAddress);\n    \n    // Always require delivery spot selection if map is visible\n    if (isMapVisible && !selectedDeliverySpot) {\n      return false;\n    }\n    \n    return hasValidAddress && hasServiceableArea;\n  };\n\n  const resetLocation = () => {\n    setSelectedAddress('');\n    setTerraceAccessible(false);\n    setUserLocation(null);\n    setSelectedDeliverySpot(null);\n    setIsMapVisible(false);\n    localStorage.removeItem('drogo_location');\n  };\n\n  const value = {\n    // State\n    selectedAddress,\n    terraceAccessible,\n    userLocation,\n    selectedDeliverySpot,\n    isMapVisible,\n    deliverySpots,\n    sampleAddresses,\n    \n    // Actions\n    updateAddress,\n    updateTerraceAccessibility,\n    getCurrentLocation,\n    selectDeliverySpot,\n    confirmDeliverySpot,\n    sendDeliverySpotToBackend,\n    getFilteredAddresses,\n    resetLocation,\n    \n    // Computed\n    isAddressValid,\n    canProceed,\n    \n    // Map controls\n    setIsMapVisible\n  };\n\n  return (\n    <LocationContext.Provider value={value}>\n      {children}\n    </LocationContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}